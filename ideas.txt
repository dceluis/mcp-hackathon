piano tutor?

kid todo app

deals monitored by an agent using mcp

auto llms.txt

auto end-to-end testing applications through mcp

a text based game of any sorts that battles llms through some sort of
intelligence battle.

an app that gives (ai) instructions to grandpas about how to do important things on
their phones.

driving test simulator with ai generated test scenarios

!tasker mcp server

why?

tasker is an automation tool for Android. It allows you to call phone actions
like get contacts, interact with the screen, read screen contents and so on.

It is very powerful as in it allow you to basically create applications without
having to write an apk for it.

The problem is that creating 'tasks' in tasker is time consuming because its
done through a phone ui. And 'programming' the task as code is not a easy fit
eitebr because it uses a custom xml format that is very hard to work with.

So, my idea is to create a big tasker project that provides atomic tasks for
most of the existing tasker actions and provide an mcp server so that llms can
create applications on the fly with just the action definitions. without needing
to manually create tasks using the tasker ui.

I a sense, tasker is an api for android automation

Writing an application for phone automation in:

lang,                 power,          simplicity
Kotlin or Java,       highest,        lowest
tasker,               high,           medium *
tasker mcp,           medium**,       easy***

*graphical ui is time consuming
** it will never be possible to implement the full feature set of tasker on the mcp server (unless we provide some meta action that can create actions in tasker??, out of scope in this hackathon version)
*** text based instructions. even better, voice instructions***

I think that if implemented correctly it will be a sort of open source google
assistant. And even better, because google assistant has only a small number of
things it can outomate (mostly google services), whereas with tasker, your
imagination is the limit

---
02-28 @ 21:16

Ok, i read about the mcp specification and it seems to encompass a communication
protocol, a server specification, and client specifications.

for this project the server can be a project that implements all the atomic
tasks, and a simple http server can be also made with tasker.

now the question is how do we implement the client and host. i see two options.

1. create a simple application in kotlin to run a simple agentic loop and use
the kotlin sdk to implement a client that will call the tasker server.
the pros is that theres already a kotlin sdk and if the http server is setup
correctly it should work out of the box? the con is that i need to setup and
build an android app! probably not too bad though claude should help me with
this but i'd still spend time learning android app development

2. create a tasker ui for the agentic loop and interact with the server.
would need to make sure that the client project and the server projects are
completely separate. pro is that its just a tasker project that others can
import, cons creating a complex tasker project is no easy task and i think this
would take at least the same amount of time as building the server project.

3. if all goes sour and i only have time to create the server project i think
the worst option is not implementing any client and leaving it at that
meaning the client is left for users to implement.
I dont think a submission without any functioning demo is going to win any
prizes though :(


---
02-28 @ 21:24

ooookk, so to implement a proper mcp server there is also sdks involves its not
just a matter of conforming to a response schema sooo this might be harder than
i thought. still there's always termux which can call tasker tasks i think? 

---
02-28 @ 21:37

so gemini 2 talked me out of implementing the server in tasker lol. its too
complex and most probably impossible because tasker does not have enough tools
to maintain state, persistent connections, two way communication, its too slow
etc etc.

we need a bridge that can still call tasker functions and read the tasker responses. and
communicate with the clients. i am going to try termux with the python mcp
library if this does not work then id say i need to pivot to another submission
